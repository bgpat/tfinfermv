#!/usr/bin/env ruby

require 'json'

# terraform plan -out=./plan-result
# terraform show -json plan-result > plan-result.json

$plan_file = ARGV.shift

# Refer address in https://www.terraform.io/docs/internals/json-format.html#plan-representation
class Resource
  def initialize(tree)
    @address = tree['address']
    @type = tree['type']
    @name = tree['name']
    @change = tree['change']
    @before = tree['change']['before']
    @after = tree['change']['after']
  end

  attr_reader 'type'
  attr_reader 'name'
  attr_reader 'before'
  attr_reader 'after'

  # self must be 'delete' resource and another must be 'create' it
  def same(another)
    return false if @type != another.type
    compare(before, another.after)
  end

  def to_s
    @address
  end

  private

  # terraform cannot distinguish nil, blank hash and blank string
  def is_blank?(obj)
    obj == nil || obj == {} || obj == ''
  end

  def compare(lhs, rhs)
    if is_blank?(lhs) && is_blank?(rhs)
      true
    elsif lhs.instance_of?(Hash) && rhs.instance_of?(Hash)
      compare_results = (lhs.keys & rhs.keys).
        map { |key| compare(lhs[key], rhs[key]) }.
        map { |com_result| com_result ? 1.0 : 0.0 }
      similarity = compare_results.sum / compare_results.length
      similarity == 1.0
    else
      lhs == rhs
    end
  end
end


$tree = File.open($plan_file) do |file|
  JSON.load(file)
end
$resource_changes = $tree['resource_changes']

# # https://github.com/hashicorp/terraform-json/blob/7bf4a174/action.go#L11-L26
def filter_actions(action)
  $resource_changes.
    select { |rc| rc['change']['actions'].length }.
    select { |rc| rc['change']['actions'][0] == action }.
    map { |rc| Resource.new(rc) }
end

$creating_resources = filter_actions('create')
$deleting_resources = filter_actions('delete')

def infer_move()
  infered_moves = $deleting_resources.map do |dr|
    infered_resource = $creating_resources.find do |cr|
      dr.same(cr)
    end
    if infered_resource
      [dr, infered_resource]
    else
      nil
    end
  end
  infered_moves.compact
end

# in unix manner, output under tsv
infer_move().each do |dr, cr|
  print dr, "\t", cr, "\n"
end
